#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ollama Tray Chat ‚Äî –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π GUI‚Äë–∫–ª–∏–µ–Ω—Ç –ø–æ–¥ Arch/Linux –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –º–æ–¥–µ–ª—è–º–∏ Ollama.
–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –û–∫–Ω–æ —á–∞—Ç–∞ (–∏—Å—Ç–æ—Ä–∏—è + –≤–≤–æ–¥), –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter (Shift+Enter ‚Äî –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
- –°—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∫–Ω–æ–ø–∫–∞ –°—Ç–æ–ø
- –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ (—Å–ø–∏—Å–æ–∫ –∏–∑ /api/tags), –ø–æ–ª–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
- –¢—Ä–µ–π‚Äë–∏–∫–æ–Ω–∫–∞ (—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤ —Ç—Ä–µ–π, –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é: –ü–æ–∫–∞–∑–∞—Ç—å/–°–∫—Ä—ã—Ç—å, –ù–æ–≤—ã–π —á–∞—Ç, –í—ã—Ö–æ–¥)
- –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ ~/.local/share/ollama-tray-chat/history.jsonl
- –ö–æ–Ω—Ñ–∏–≥ –≤ ~/.config/ollama-tray-chat/config.json

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
  pacman -S python python-pyqt6 python-requests

–ó–∞–ø—É—Å–∫:
  python3 ollama_tray_chat.py  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  python3 ollama_tray_chat.py --minimize  # —Å—Ç–∞—Ä—Ç —Å—Ä–∞–∑—É –≤ —Ç—Ä–µ–µ

–°–æ–≤–µ—Ç: –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏ –∏ –∑–∞–ø—É—Å—Ç–∏ Ollama:
  yay -S ollama-bin && systemctl --user enable --now ollama
  ollama pull phi3.5:3.8b-mini-instruct
"""
from __future__ import annotations
import json
import os
import sys
import time
from dataclasses import dataclass, field
from typing import List, Optional
from pathlib import Path

import requests
from PyQt6 import QtCore, QtGui, QtWidgets

OLLAMA_URL = os.environ.get("OLLAMA_URL", "http://127.0.0.1:11434")
APP_ID = "ollama-tray-chat"
APP_NAME = "Ollama Tray Chat"
APP_VERSION = "1.0.0"
CONFIG_DIR = os.path.join(os.path.expanduser("~"), ".config", APP_ID)
DATA_DIR = os.path.join(os.path.expanduser("~"), ".local", "share", APP_ID)
CONFIG_PATH = os.path.join(CONFIG_DIR, "config.json")
HISTORY_PATH = os.path.join(DATA_DIR, "history.jsonl")

# –ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞)
SCRIPT_DIR = Path(__file__).parent
ICON_PATH = SCRIPT_DIR / "icons" / "ollama-chat.svg"


def ensure_paths():
    os.makedirs(CONFIG_DIR, exist_ok=True)
    os.makedirs(DATA_DIR, exist_ok=True)


@dataclass
class ChatMessage:
    role: str  # "system" | "user" | "assistant"
    content: str


@dataclass
class ChatState:
    model: str = "phi3.5:3.8b-mini-instruct"
    system_prompt: str = (
        "–¢—ã ‚Äî –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ Linux (Arch) –∏ fish. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –¥–∞–≤–∞–π –∫–æ–º–∞–Ω–¥—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ.\n\n"
        "–í–ê–ñ–ù–û: –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ–±–æ—Ä–∞—á–∏–≤–∞–π –≤ –±–ª–æ–∫–∏ –∫–æ–¥–∞ —Å ```bash –∏–ª–∏ –ø–æ–º–µ—á–∞–π —á–µ—Ä–µ–∑ `–∫–æ–º–∞–Ω–¥–∞`.\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "```bash\n"
        "ls -la\n"
        "```\n"
        "–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ: `ls -la`"
    )
    messages: List[ChatMessage] = field(default_factory=list)
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥
    safe_sudo_commands: List[str] = field(default_factory=lambda: [
        "systemctl", "journalctl", "pacman", "apt", "dnf", "yum",
        "docker", "podman", "snap", "flatpak", "cat", "less", "tail",
        "head", "grep", "find", "ls", "lsblk", "lsusb", "lspci",
        "ip", "ss", "netstat", "dmesg",
    ])
    deny_patterns: List[str] = field(default_factory=lambda: [
        r"\brm\s+(-[rf]*[rf]|-[rf]*[rf])",
        r"\brm\b.*--no-preserve-root",
        r"\bdd\b.*if=.*of=/dev/",
        r"\bmkfs\.",
        r"\bfdisk\b",
        r"\bparted\b",
        r":\s*\(\s*\)\s*\{",
        r"while\s+true.*do",
        r">\s*/etc/",
        r">\s*/boot/",
        r">\s*/sys/",
        r"\bchmod\s+777\s+/",
        r"\bchown\s+.*\s+/\s*$",
        r"\bhping",
        r"\bnmap.*-sS",
        r"curl.*\|\s*bash",
        r"wget.*\|\s*sh",
        r"curl.*\|\s*sh",
        r">\s*/dev/null\s+2>&1\s*&",
        r"\b(mkfs|shutdown|reboot|halt|poweroff|init\s+[06])\b",
    ])


class ChatWorker(QtCore.QThread):
    chunk = QtCore.pyqtSignal(str)
    started_reply = QtCore.pyqtSignal()
    finished_ok = QtCore.pyqtSignal()
    failed = QtCore.pyqtSignal(str)

    def __init__(self, state: ChatState, user_prompt: str, parent=None):
        super().__init__(parent)
        self.state = state
        self.user_prompt = user_prompt
        self._stop_flag = False

    def stop(self):
        self._stop_flag = True

    def run(self):
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç Ollama /api/chat
            msgs = []
            if self.state.system_prompt.strip():
                msgs.append({"role": "system", "content": self.state.system_prompt})
            for m in self.state.messages:
                msgs.append({"role": m.role, "content": m.content})
            msgs.append({"role": "user", "content": self.user_prompt})

            payload = {
                "model": self.state.model,
                "messages": msgs,
                "stream": True,
            }
            url = f"{OLLAMA_URL}/api/chat"
            self.started_reply.emit()
            with requests.post(url, json=payload, stream=True, timeout=60) as r:
                r.raise_for_status()
                full = []
                for line in r.iter_lines(decode_unicode=True):
                    if self._stop_flag:
                        break
                    if not line:
                        continue
                    try:
                        obj = json.loads(line)
                    except Exception:
                        continue
                    if obj.get("done"):
                        break
                    msg = obj.get("message", {})
                    delta = msg.get("content", "")
                    if delta:
                        full.append(delta)
                        self.chunk.emit(delta)
                # –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚Äî –¥–æ–±–∞–≤–∏–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–ª–∏–∫–æ–º
                if not self._stop_flag:
                    answer = "".join(full)
                    self.state.messages.append(ChatMessage(role="user", content=self.user_prompt))
                    self.state.messages.append(ChatMessage(role="assistant", content=answer))
                    self.finished_ok.emit()
        except Exception as e:
            self.failed.emit(str(e))


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle(APP_NAME)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫—É
        if ICON_PATH.exists():
            self.setWindowIcon(QtGui.QIcon(str(ICON_PATH)))
        else:
            self.setWindowIcon(QtGui.QIcon.fromTheme("chat"))
        
        self.resize(820, 600)

        self.state = self.load_state()
        self.worker: Optional[ChatWorker] = None

        # –í–∏–¥–∂–µ—Ç—ã
        self.history = QtWidgets.QTextEdit(readOnly=True)
        self.history.setStyleSheet("""
            QTextEdit {
                background-color: #d8d8d8;
                border: 1px solid #999;
                border-radius: 4px;
                padding: 8px;
                color: #212121;
            }
        """)
        
        self.input = QtWidgets.QPlainTextEdit()
        self.input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ‚Ä¶ (Enter ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, Shift+Enter ‚Äî –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞)")
        self.input.setStyleSheet("""
            QPlainTextEdit {
                border: 1px solid #999;
                border-radius: 4px;
                padding: 8px;
                background-color: #e8e8e8;
                color: #212121;
                font-size: 11pt;
            }
        """)
        self.input.setMinimumHeight(80)
        self.input.setMaximumHeight(150)
        
        self.send_btn = QtWidgets.QPushButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        self.send_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 8px 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:disabled {
                background-color: #cccccc;
            }
        """)
        
        self.stop_btn = QtWidgets.QPushButton("‚õî –°—Ç–æ–ø")
        self.stop_btn.setEnabled(False)
        self.stop_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 8px 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #da190b;
            }
            QPushButton:disabled {
                background-color: #cccccc;
            }
        """)

        self.model_box = QtWidgets.QComboBox()
        self.model_box.setEditable(False)
        self.model_box.setStyleSheet("""
            QComboBox {
                border: 1px solid #999;
                border-radius: 4px;
                padding: 6px;
                background-color: #e8e8e8;
                color: #212121;
                font-size: 11pt;
            }
        """)
        
        self.refresh_models_btn = QtWidgets.QToolButton()
        self.refresh_models_btn.setIcon(QtGui.QIcon.fromTheme("view-refresh"))
        self.refresh_models_btn.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–∑ Ollama")
        self.refresh_models_btn.setStyleSheet("""
            QToolButton {
                border: 1px solid #999;
                border-radius: 4px;
                padding: 6px;
                background-color: #e8e8e8;
            }
            QToolButton:hover {
                background-color: #d0d0d0;
            }
        """)

        self.sys_prompt = QtWidgets.QPlainTextEdit()
        self.sys_prompt.setPlaceholderText("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        self.sys_prompt.setPlainText(self.state.system_prompt)
        self.sys_prompt.setFixedHeight(80)
        self.sys_prompt.setStyleSheet("""
            QPlainTextEdit {
                border: 1px solid #999;
                border-radius: 4px;
                padding: 8px;
                background-color: #e8e8e8;
                color: #212121;
                font-size: 11pt;
            }
        """)

        # –†–∞–∑–º–µ—Ç–∫–∞
        top_bar = QtWidgets.QHBoxLayout()
        top_bar.addWidget(QtWidgets.QLabel("ü§ñ –ú–æ–¥–µ–ª—å:"))
        top_bar.addWidget(self.model_box, 1)
        top_bar.addWidget(self.refresh_models_btn)

        btn_bar = QtWidgets.QHBoxLayout()
        btn_bar.addStretch(1)
        btn_bar.addWidget(self.stop_btn)
        btn_bar.addWidget(self.send_btn)

        central = QtWidgets.QWidget()
        v = QtWidgets.QVBoxLayout(central)
        v.setSpacing(8)
        v.setContentsMargins(12, 12, 12, 12)
        v.addLayout(top_bar)
        v.addWidget(QtWidgets.QLabel("‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:"))
        v.addWidget(self.sys_prompt)
        v.addWidget(QtWidgets.QLabel("üí¨ –ò—Å—Ç–æ—Ä–∏—è:"))
        v.addWidget(self.history, 1)
        # --- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ---
        cmd_label = QtWidgets.QLabel("üîß –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤–æ–ø—Ä–æ—Å–µ):")
        cmd_label.setWordWrap(True)
        v.addWidget(cmd_label)
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.suggested_list = QtWidgets.QListWidget()
        self.suggested_list.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.SingleSelection)
        self.suggested_list.setFixedHeight(120)
        v.addWidget(self.suggested_list)

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        sug_btn_bar = QtWidgets.QHBoxLayout()
        self.sug_preview_btn = QtWidgets.QPushButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä")
        self.sug_accept_btn = QtWidgets.QPushButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å")
        self.sug_reject_btn = QtWidgets.QPushButton("üóëÔ∏è –£–±—Ä–∞—Ç—å")
        sug_btn_bar.addWidget(self.sug_preview_btn)
        sug_btn_bar.addWidget(self.sug_accept_btn)
        sug_btn_bar.addWidget(self.sug_reject_btn)
        v.addLayout(sug_btn_bar)
        v.addWidget(QtWidgets.QLabel("‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ:"))
        v.addWidget(self.input)
        v.addLayout(btn_bar)
        self.setCentralWidget(central)

        # –ú–µ–Ω—é
        menubar = self.menuBar()
        file_menu = menubar.addMenu("üìÅ –§–∞–π–ª")
        
        new_chat_action = file_menu.addAction("üÜï –ù–æ–≤—ã–π —á–∞—Ç")
        new_chat_action.setShortcut("Ctrl+N")
        new_chat_action.triggered.connect(self.new_chat)
        
        file_menu.addSeparator()
        
        quit_action = file_menu.addAction("üö™ –í—ã—Ö–æ–¥")
        quit_action.setShortcut("Ctrl+Q")
        quit_action.triggered.connect(self.on_quit)
        
        settings_menu = menubar.addMenu("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        security_action = settings_menu.addAction("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥")
        security_action.triggered.connect(self.show_security_settings)
        
        help_menu = menubar.addMenu("‚ùì –ü–æ–º–æ—â—å")
        about_action = help_menu.addAction("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        about_action.triggered.connect(self.show_about)

        # –¢—Ä–µ–π
        icon = QtGui.QIcon(str(ICON_PATH)) if ICON_PATH.exists() else QtGui.QIcon.fromTheme("chat")
        self.tray = QtWidgets.QSystemTrayIcon(icon, self)
        self.tray.setToolTip(APP_NAME)
        menu = QtWidgets.QMenu()
        self.action_show_hide = menu.addAction("üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å/–°–∫—Ä—ã—Ç—å")
        self.action_new_chat = menu.addAction("üÜï –ù–æ–≤—ã–π —á–∞—Ç")
        menu.addSeparator()
        self.action_quit = menu.addAction("üö™ –í—ã—Ö–æ–¥")
        self.tray.setContextMenu(menu)
        self.tray.activated.connect(self.on_tray_activated)
        self.tray.show()

        # –°–∏–≥–Ω–∞–ª—ã
        self.send_btn.clicked.connect(self.on_send)
        self.stop_btn.clicked.connect(self.on_stop)
        self.refresh_models_btn.clicked.connect(self.populate_models)
        # suggested commands
        self.sug_preview_btn.clicked.connect(self.on_suggest_preview)
        self.sug_accept_btn.clicked.connect(self.on_suggest_accept)
        self.sug_reject_btn.clicked.connect(self.on_suggest_reject)
        self.action_quit.triggered.connect(self.on_quit)
        self.action_show_hide.triggered.connect(self.toggle_visible)
        self.action_new_chat.triggered.connect(self.new_chat)
        self.input.installEventFilter(self)

        # –î–∞–Ω–Ω—ã–µ
        self.populate_models()
        self.restore_history_to_view()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.statusBar().showMessage("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    # ====== –°–ª—É–∂–µ–±–Ω—ã–µ ======
    def load_state(self) -> ChatState:
        ensure_paths()
        if os.path.exists(CONFIG_PATH):
            try:
                with open(CONFIG_PATH, "r", encoding="utf-8") as f:
                    cfg = json.load(f)
                st = ChatState(
                    model=cfg.get("model", "phi3.5:3.8b-mini-instruct"),
                    system_prompt=cfg.get("system_prompt", ""),
                    messages=[],
                )
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if "safe_sudo_commands" in cfg:
                    st.safe_sudo_commands = cfg["safe_sudo_commands"]
                if "deny_patterns" in cfg:
                    st.deny_patterns = cfg["deny_patterns"]
                return st
            except Exception:
                pass
        return ChatState()

    def save_state(self):
        ensure_paths()
        cfg = {
            "model": self.state.model,
            "system_prompt": self.sys_prompt.toPlainText(),
            "safe_sudo_commands": self.state.safe_sudo_commands,
            "deny_patterns": self.state.deny_patterns,
        }
        with open(CONFIG_PATH, "w", encoding="utf-8") as f:
            json.dump(cfg, f, ensure_ascii=False, indent=2)

    def append_history_log(self, role: str, content: str):
        ensure_paths()
        rec = {"ts": int(time.time()), "role": role, "content": content}
        with open(HISTORY_PATH, "a", encoding="utf-8") as f:
            f.write(json.dumps(rec, ensure_ascii=False) + "\n")

    def restore_history_to_view(self):
        self.history.clear()
        for m in self.state.messages:
            self._append_bubble(m.role, m.content)

    # ====== UI helpers ======
    def _append_bubble(self, role: str, text: str):
        role_tag = {
            "user": ("üë§ –í—ã", "#e3f2fd", "#1565c0"),      # –ì–æ–ª—É–±–æ–π —Ñ–æ–Ω, —Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç
            "assistant": ("ü§ñ –ú–æ–¥–µ–ª—å", "#f1f8e9", "#33691e"),  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π —Ñ–æ–Ω, —Ç—ë–º–Ω–æ-–∑–µ–ª—ë–Ω—ã–π —Ç–µ–∫—Å—Ç
            "system": ("‚öôÔ∏è System", "#fff9c4", "#f57f17"),     # –ñ—ë–ª—Ç—ã–π —Ñ–æ–Ω, –æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ç–µ–∫—Å—Ç
        }.get(role, (role, "#fff", "#000"))
        who, bg, text_color = role_tag
        cursor = self.history.textCursor()
        cursor.movePosition(QtGui.QTextCursor.MoveOperation.End)
        fmt = QtGui.QTextBlockFormat()
        fmt.setLeftMargin(8)
        fmt.setRightMargin(8)
        fmt.setTopMargin(4)
        fmt.setBottomMargin(4)
        cursor.insertBlock(fmt)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–∏–º—è —Ä–æ–ª–∏)
        boxfmt = QtGui.QTextCharFormat()
        boxfmt.setBackground(QtGui.QColor(bg))
        boxfmt.setForeground(QtGui.QColor(text_color))
        boxfmt.setFontWeight(QtGui.QFont.Weight.Bold)
        cursor.insertText(f"{who}:\n", boxfmt)

        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        bodyfmt = QtGui.QTextCharFormat()
        bodyfmt.setFontWeight(QtGui.QFont.Weight.Normal)
        bodyfmt.setBackground(QtGui.QColor(bg))
        bodyfmt.setForeground(QtGui.QColor("#212121"))  # –¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        cursor.insertText(text + "\n\n", bodyfmt)
        self.history.ensureCursorVisible()

    # ====== –ú–æ–¥–µ–ª–∏ ======
    def populate_models(self):
        self.model_box.clear()
        self.statusBar().showMessage("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...")
        try:
            r = requests.get(f"{OLLAMA_URL}/api/tags", timeout=5)
            r.raise_for_status()
            data = r.json()
            models = [m.get("name") for m in data.get("models", []) if m.get("name")]
            if not models:
                raise RuntimeError("models empty")
            for name in models:
                self.model_box.addItem(name)
            # –≤—ã–±—Ä–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é
            idx = self.model_box.findText(self.state.model)
            if idx >= 0:
                self.model_box.setCurrentIndex(idx)
            else:
                self.model_box.setCurrentIndex(0)
                self.state.model = self.model_box.currentText()
            self.statusBar().showMessage(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
        except Exception as e:
            # –§–æ–ª–ª–±–µ–∫: –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
            self.model_box.addItem(self.state.model)
            self.statusBar().showMessage(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")

    # ====== –û—Ç–ø—Ä–∞–≤–∫–∞ ======
    def on_send(self):
        if self.worker and self.worker.isRunning():
            return
        prompt = self.input.toPlainText().strip()
        if not prompt:
            return
        self.state.model = self.model_box.currentText()
        self.state.system_prompt = self.sys_prompt.toPlainText()
        self.save_state()

        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        self.suggested_list.clear()

        # UI
        self._append_bubble("user", prompt)
        self.append_history_log("user", prompt)
        self.input.clear()

        # –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –ø–æ—Ç–æ–∫–∞
        self._append_bubble("assistant", "‚è≥ –î—É–º–∞—é...")

        # –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
        self.worker = ChatWorker(self.state, prompt, self)
        self.worker.chunk.connect(self.on_chunk)
        self.worker.started_reply.connect(self.on_started_reply)
        self.worker.finished_ok.connect(self.on_finished_ok)
        self.worker.failed.connect(self.on_failed)
        self.worker.start()
        
        self.statusBar().showMessage("üí≠ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å...")

    def on_chunk(self, delta: str):
        # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–ª–æ–∫—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        cursor = self.history.textCursor()
        cursor.movePosition(QtGui.QTextCursor.MoveOperation.End)
        cursor.movePosition(QtGui.QTextCursor.MoveOperation.PreviousBlock)
        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ ("‚è≥ –î—É–º–∞—é...") –∏ –∑–∞–º–µ–Ω—è–µ–º, –¥–æ–±–∞–≤–ª—è—è –¥–µ–ª—å—Ç—É
        self.history.moveCursor(QtGui.QTextCursor.MoveOperation.End)
        self.history.insertPlainText(delta)
        self.history.ensureCursorVisible()

    def on_started_reply(self):
        self.send_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.statusBar().showMessage("üîÑ –ü–æ–ª—É—á–∞—é –æ—Ç–≤–µ—Ç...")

    def on_finished_ok(self):
        self.send_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.statusBar().showMessage("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        # –°–æ—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–ø–ª–∏–∫—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ª–æ–≥ (–∏–∑ state)
        if self.state.messages and self.state.messages[-1].role == "assistant":
            self.append_history_log("assistant", self.state.messages[-1].content)
            # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ö
            commands = self.parse_commands(self.state.messages[-1].content)
            self.suggested_list.clear()
            for cmd in commands:
                item = QtWidgets.QListWidgetItem(cmd)
                self.suggested_list.addItem(item)

    def on_failed(self, err: str):
        self.send_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.statusBar().showMessage(f"‚ùå –û—à–∏–±–∫–∞: {err}")
        QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Ollama:\n{err}")

    def on_stop(self):
        if self.worker and self.worker.isRunning():
            self.worker.stop()
            self.statusBar().showMessage("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    # ====== –¢—Ä–µ–π/–æ–∫–Ω–æ ======
    def closeEvent(self, e: QtGui.QCloseEvent):
        # —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ç—Ä–µ–π –≤–º–µ—Å—Ç–æ –≤—ã—Ö–æ–¥–∞
        e.ignore()
        self.hide()
        self.tray.showMessage(
            APP_NAME, 
            "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Ç—Ä–µ–π", 
            QtWidgets.QSystemTrayIcon.MessageIcon.Information, 
            2000
        )

    def toggle_visible(self):
        if self.isVisible():
            self.hide()
        else:
            self.show()
            self.raise_()
            self.activateWindow()

    def new_chat(self):
        self.state.messages.clear()
        self.history.clear()
        self.append_history_log("system", "--- new chat ---")
        self.statusBar().showMessage("üÜï –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç")

    def on_tray_activated(self, reason: QtWidgets.QSystemTrayIcon.ActivationReason):
        if reason in (QtWidgets.QSystemTrayIcon.ActivationReason.Trigger, 
                      QtWidgets.QSystemTrayIcon.ActivationReason.DoubleClick):
            self.toggle_visible()

    def on_quit(self):
        QtWidgets.QApplication.quit()

    def show_about(self):
        QtWidgets.QMessageBox.about(
            self,
            f"–û –ø—Ä–æ–≥—Ä–∞–º–º–µ {APP_NAME}",
            f"""<h3>{APP_NAME}</h3>
            <p>–í–µ—Ä—Å–∏—è: {APP_VERSION}</p>
            <p>–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π GUI-–∫–ª–∏–µ–Ω—Ç –¥–ª—è Ollama</p>
            <p><b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b></p>
            <ul>
                <li>–°—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
                <li>–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π</li>
                <li>–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏</li>
                <li>–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç</li>
                <li>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</li>
            </ul>
            <p><b>–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è Arch Linux + KDE</b></p>
            <p>¬© 2025</p>
            """
        )

    def show_security_settings(self):
        """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥"""
        dlg = QtWidgets.QDialog(self)
        dlg.setWindowTitle("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥")
        dlg.resize(700, 500)
        
        layout = QtWidgets.QVBoxLayout(dlg)
        
        # –¢–∞–±—ã
        tabs = QtWidgets.QTabWidget()
        
        # === –í–∫–ª–∞–¥–∫–∞ 1: –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ sudo –∫–æ–º–∞–Ω–¥—ã ===
        sudo_tab = QtWidgets.QWidget()
        sudo_layout = QtWidgets.QVBoxLayout(sudo_tab)
        
        sudo_label = QtWidgets.QLabel(
            "‚úÖ <b>–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å sudo</b><br>"
            "–≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å sudo (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É):"
        )
        sudo_layout.addWidget(sudo_label)
        
        self.sudo_edit = QtWidgets.QPlainTextEdit()
        self.sudo_edit.setPlainText("\n".join(self.state.safe_sudo_commands))
        self.sudo_edit.setStyleSheet("""
            QPlainTextEdit {
                font-family: monospace;
                background-color: #e8e8e8;
                color: #212121;
                border: 1px solid #999;
                border-radius: 4px;
                padding: 8px;
            }
        """)
        sudo_layout.addWidget(self.sudo_edit)
        
        sudo_hint = QtWidgets.QLabel(
            "üí° <i>–ü—Ä–∏–º–µ—Ä—ã: systemctl, docker, pacman, journalctl</i>"
        )
        sudo_hint.setWordWrap(True)
        sudo_layout.addWidget(sudo_hint)
        
        tabs.addTab(sudo_tab, "‚úÖ Sudo –∫–æ–º–∞–Ω–¥—ã")
        
        # === –í–∫–ª–∞–¥–∫–∞ 2: –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è) ===
        deny_tab = QtWidgets.QWidget()
        deny_layout = QtWidgets.QVBoxLayout(deny_tab)
        
        deny_label = QtWidgets.QLabel(
            "‚ùå <b>–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã)</b><br>"
            "–ö–æ–º–∞–Ω–¥—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç—Ç–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º, –±—É–¥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:"
        )
        deny_layout.addWidget(deny_label)
        
        self.deny_edit = QtWidgets.QPlainTextEdit()
        self.deny_edit.setPlainText("\n".join(self.state.deny_patterns))
        self.deny_edit.setStyleSheet("""
            QPlainTextEdit {
                font-family: monospace;
                background-color: #e8e8e8;
                color: #212121;
                border: 1px solid #999;
                border-radius: 4px;
                padding: 8px;
            }
        """)
        deny_layout.addWidget(self.deny_edit)
        
        deny_hint = QtWidgets.QLabel(
            "‚ö†Ô∏è <i>–û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ regex –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä.<br>"
            "–ü—Ä–∏–º–µ—Ä—ã: \\brm\\s+-rf (–±–ª–æ–∫–∏—Ä—É–µ—Ç rm -rf), \\bshutdown\\b (–±–ª–æ–∫–∏—Ä—É–µ—Ç shutdown)</i>"
        )
        deny_hint.setWordWrap(True)
        deny_layout.addWidget(deny_hint)
        
        tabs.addTab(deny_tab, "‚ùå –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
        
        # === –í–∫–ª–∞–¥–∫–∞ 3: –°–ø—Ä–∞–≤–∫–∞ ===
        help_tab = QtWidgets.QWidget()
        help_layout = QtWidgets.QVBoxLayout(help_tab)
        
        help_text = QtWidgets.QTextBrowser()
        help_text.setHtml("""
            <h3>üõ°Ô∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h3>
            
            <h4>–ü—Ä–∏–Ω—Ü–∏–ø Blacklist (–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫)</h4>
            <p><b>–†–∞–∑—Ä–µ—à–µ–Ω—ã –í–°–ï –∫–æ–º–∞–Ω–¥—ã</b>, –∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.</p>
            
            <h4>‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ sudo –∫–æ–º–∞–Ω–¥—ã</h4>
            <p>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å <code>sudo</code>. 
            –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ, <code>sudo</code> –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.</p>
            
            <h4>‚ùå –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫</h4>
            <p>Regex-–ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ª—é–±—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º ‚Äî –æ–Ω–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è.</p>
            
            <h4>–ü—Ä–∏–º–µ—Ä—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</h4>
            <ul>
                <li><code>\\brm\\s+-rf</code> ‚Äî –±–ª–æ–∫–∏—Ä—É–µ—Ç <code>rm -rf</code></li>
                <li><code>\\bdd\\b.*of=/dev/</code> ‚Äî –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å dd –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</li>
                <li><code>curl.*\\|\\s*bash</code> ‚Äî –±–ª–æ–∫–∏—Ä—É–µ—Ç <code>curl url | bash</code></li>
            </ul>
            
            <h4>‚ö†Ô∏è –í–∞–∂–Ω–æ!</h4>
            <ul>
                <li>–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–¥ –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º</li>
                <li>AI –º–æ–∂–µ—Ç –æ—à–∏–±–∞—Ç—å—Å—è –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö</li>
                <li>–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"</li>
            </ul>
        """)
        help_layout.addWidget(help_text)
        
        tabs.addTab(help_tab, "‚ùì –°–ø—Ä–∞–≤–∫–∞")
        
        layout.addWidget(tabs)
        
        # –ö–Ω–æ–ø–∫–∏
        btn_box = QtWidgets.QHBoxLayout()
        
        reset_btn = QtWidgets.QPushButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º")
        reset_btn.clicked.connect(lambda: self.reset_security_defaults(dlg))
        
        save_btn = QtWidgets.QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        save_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        save_btn.clicked.connect(lambda: self.save_security_settings(dlg))
        
        cancel_btn = QtWidgets.QPushButton("‚ùå –û—Ç–º–µ–Ω–∞")
        cancel_btn.clicked.connect(dlg.reject)
        
        btn_box.addWidget(reset_btn)
        btn_box.addStretch()
        btn_box.addWidget(cancel_btn)
        btn_box.addWidget(save_btn)
        
        layout.addLayout(btn_box)
        
        dlg.exec()
    
    def reset_security_defaults(self, dlg):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        reply = QtWidgets.QMessageBox.question(
            dlg,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í–µ—Ä–Ω—É—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?",
            QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No
        )
        if reply == QtWidgets.QMessageBox.StandardButton.Yes:
            default_state = ChatState()
            self.sudo_edit.setPlainText("\n".join(default_state.safe_sudo_commands))
            self.deny_edit.setPlainText("\n".join(default_state.deny_patterns))
            QtWidgets.QMessageBox.information(dlg, "–ì–æ—Ç–æ–≤–æ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º")
    
    def save_security_settings(self, dlg):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        # –ü–∞—Ä—Å–∏–º sudo –∫–æ–º–∞–Ω–¥—ã
        sudo_text = self.sudo_edit.toPlainText()
        sudo_cmds = [line.strip() for line in sudo_text.splitlines() if line.strip()]
        
        # –ü–∞—Ä—Å–∏–º deny patterns
        deny_text = self.deny_edit.toPlainText()
        deny_pats = [line.strip() for line in deny_text.splitlines() if line.strip()]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º regex –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        import re
        invalid_patterns = []
        for pat in deny_pats:
            try:
                re.compile(pat)
            except re.error:
                invalid_patterns.append(pat)
        
        if invalid_patterns:
            QtWidgets.QMessageBox.critical(
                dlg,
                "–û—à–∏–±–∫–∞ –≤ regex",
                f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã:\n\n" + "\n".join(invalid_patterns[:5])
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        self.state.safe_sudo_commands = sudo_cmds
        self.state.deny_patterns = deny_pats
        self.save_state()
        
        QtWidgets.QMessageBox.information(
            dlg,
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            f"‚úÖ Sudo –∫–æ–º–∞–Ω–¥: {len(sudo_cmds)}\n"
            f"‚ùå –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {len(deny_pats)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"
        )
        dlg.accept()

    # ====== –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ======
    def parse_commands(self, text: str) -> list:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ shell-–∫–æ–º–∞–Ω–¥—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
        –ü—Ä–∞–≤–∏–ª–∞:
        - –ë–ª–æ–∫–∏ ```bash```, ```sh```, ```fish```, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ ```
        - –ö–æ–º–∞–Ω–¥—ã –≤ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö `–∫–æ–º–∞–Ω–¥–∞`
        - –°—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å `$ `, `> `, `sudo `
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–∫–æ–º–∞–Ω–¥).
        """
        cmds = []
        if not text:
            return cmds

        import re

        # 1) –ë–ª–æ–∫–∏ –∫–æ–¥–∞ ```bash```, ```sh```, ```fish```, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ ```
        code_blocks = re.findall(r"```(?:bash|sh|fish)?\s*\n(.*?)```", text, flags=re.S | re.I)
        for block in code_blocks:
            for line in block.splitlines():
                line = line.strip()
                if not line or line.startswith("#"):
                    continue
                # —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã $ –∏ >
                if line.startswith("$ "):
                    line = line[2:].strip()
                elif line.startswith("> "):
                    line = line[2:].strip()
                if line:
                    cmds.append(line)

        # 2) –ö–æ–º–∞–Ω–¥—ã –≤ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö `–∫–æ–º–∞–Ω–¥–∞`
        inline_cmds = re.findall(r"`([^`\n]+)`", text)
        for cmd in inline_cmds:
            cmd = cmd.strip()
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã)
            parts = cmd.split()
            if parts and re.match(r"^[a-z0-9_\-./]+$", parts[0], flags=re.I):
                if cmd not in cmds and len(cmd) < 200:  # —Ñ–∏–ª—å—Ç—Ä —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
                    cmds.append(cmd)

        # 3) –°—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å $ –∏–ª–∏ > –∏–ª–∏ sudo
        for line in text.splitlines():
            s = line.strip()
            if not s:
                continue
            if s.startswith("$ "):
                candidate = s[2:].strip()
                if candidate and candidate not in cmds:
                    cmds.append(candidate)
            elif s.startswith("> "):
                candidate = s[2:].strip()
                if candidate and candidate not in cmds:
                    cmds.append(candidate)
            elif s.startswith("sudo ") and s not in cmds:
                cmds.append(s)

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
        seen = set()
        out = []
        for c in cmds:
            if c not in seen:
                seen.add(c)
                out.append(c)
        return out

    # ====== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ======
    def on_suggest_preview(self):
        item = self.suggested_list.currentItem()
        if not item:
            QtWidgets.QMessageBox.information(self, "–ü—Ä–æ—Å–º–æ—Ç—Ä", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Å–ø–∏—Å–∫–µ")
            return
        cmd = item.text()
        QtWidgets.QMessageBox.information(self, "–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∞–Ω–¥—ã", f"–ö–æ–º–∞–Ω–¥–∞:\n{cmd}")

    def on_suggest_reject(self):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É - –ø—Ä–æ—Å—Ç–æ —É–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞"""
        item = self.suggested_list.currentItem()
        if not item:
            return
        self.suggested_list.takeItem(self.suggested_list.currentRow())

    def on_suggest_accept(self):
        item = self.suggested_list.currentItem()
        if not item:
            QtWidgets.QMessageBox.information(self, "–û–¥–æ–±—Ä–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è")
            return
        cmd = item.text()
        # –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        resp = QtWidgets.QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
            f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ?\n\n{cmd}",
            QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.No,
        )
        if resp == QtWidgets.QMessageBox.StandardButton.Yes:
            # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (allowlist)
            allowed = self.is_command_allowed(cmd)
            if not allowed:
                QtWidgets.QMessageBox.critical(self, "–ó–∞–ø—Ä–µ—â–µ–Ω–æ", "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é")
                return

            # –°–æ–∑–¥–∞–¥–∏–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            dlg = QtWidgets.QDialog(self)
            dlg.setWindowTitle(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {cmd}")
            dlg.resize(700, 400)
            lay = QtWidgets.QVBoxLayout(dlg)
            out_view = QtWidgets.QTextEdit(readOnly=True)
            out_view.setStyleSheet("background:#111; color:#cfc; font-family: monospace;")
            lay.addWidget(out_view)
            btns = QtWidgets.QHBoxLayout()
            stop_btn = QtWidgets.QPushButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            close_btn = QtWidgets.QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
            close_btn.setEnabled(False)
            btns.addWidget(stop_btn)
            btns.addStretch(1)
            btns.addWidget(close_btn)
            lay.addLayout(btns)

            # –∑–∞–ø—É—Å—Ç–∏–º CommandRunner
            runner = CommandRunner(cmd, parent=self)

            def on_stdout(line):
                out_view.append(f"[out] {line}")

            def on_stderr(line):
                out_view.append(f"[err] {line}")

            def on_failed(err):
                out_view.append(f"[failed] {err}")
                close_btn.setEnabled(True)

            def on_finished(rc):
                out_view.append(f"[finished] returncode={rc}")
                close_btn.setEnabled(True)

            runner.line_stdout.connect(on_stdout)
            runner.line_stderr.connect(on_stderr)
            runner.failed.connect(on_failed)
            runner.finished.connect(on_finished)

            def on_stop_clicked():
                runner.stop()
                stop_btn.setEnabled(False)

            def on_close_clicked():
                dlg.accept()

            stop_btn.clicked.connect(on_stop_clicked)
            close_btn.clicked.connect(on_close_clicked)

            runner.start()
            dlg.exec()

            # –ª–æ–≥–∏—Ä—É–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–∫–æ–º–∞–Ω–¥—É –ù–ï —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞)
            self.append_history_log("system", f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {cmd}")

    def is_command_allowed(self, cmd: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (blacklist).
        –†–∞–∑—Ä–µ—à–µ–Ω—ã –í–°–ï –∫–æ–º–∞–Ω–¥—ã, –∫—Ä–æ–º–µ —è–≤–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö.
        –ë–ª–æ–∫–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã.
        """
        import re

        if not cmd or not cmd.strip():
            return False

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        for pattern in self.state.deny_patterns:
            try:
                if re.search(pattern, cmd, flags=re.I):
                    return False
            except re.error:
                # –ï—Å–ª–∏ regex –Ω–µ–≤–∞–ª–∏–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                continue
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–ø—Ä–µ—â–∞–µ–º sudo —Å –æ–ø–∞—Å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        if cmd.strip().startswith("sudo"):
            # –†–∞–∑—Ä–µ—à–∞–µ–º sudo —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            parts = cmd.strip().split()
            if len(parts) >= 2:
                sudo_cmd = parts[1]
                if sudo_cmd not in self.state.safe_sudo_commands:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–ø–∞—Å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
                    dangerous_flags = ["rm", "dd", "mkfs", "fdisk", "parted", "shutdown", "reboot"]
                    if any(d in sudo_cmd for d in dangerous_flags):
                        return False
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ - —Ä–∞–∑—Ä–µ—à–∞–µ–º
        return True


class CommandRunner(QtCore.QThread):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —Å—Ç—Ä–∏–º–∏—Ç stdout/stderr.
    –°–∏–≥–Ω–∞–ª—ã:
      line_stdout(str), line_stderr(str), finished(int returncode), failed(str error)
    """
    line_stdout = QtCore.pyqtSignal(str)
    line_stderr = QtCore.pyqtSignal(str)
    finished = QtCore.pyqtSignal(int)
    failed = QtCore.pyqtSignal(str)

    def __init__(self, command: str, parent=None):
        super().__init__(parent)
        self.command = command
        self._proc = None

    def run(self):
        import shlex
        import subprocess

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º shell=False –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            args = shlex.split(self.command)
            self._proc = subprocess.Popen(
                args,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
            )

            # —á–∏—Ç–∞–µ–º stdout –∏ stderr –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            assert self._proc.stdout is not None
            assert self._proc.stderr is not None
            from threading import Thread

            def read_stream(stream, emitter):
                for ln in iter(stream.readline, ""):
                    emitter.emit(ln.rstrip('\n'))
                stream.close()

            t1 = Thread(target=read_stream, args=(self._proc.stdout, self.line_stdout))
            t2 = Thread(target=read_stream, args=(self._proc.stderr, self.line_stderr))
            t1.start()
            t2.start()
            t1.join()
            t2.join()

            rc = self._proc.wait()
            self.finished.emit(rc)
        except Exception as e:
            self.failed.emit(str(e))

    def stop(self):
        if self._proc and self._proc.poll() is None:
            try:
                self._proc.terminate()
            except Exception:
                pass


def main():
    import argparse
    parser = argparse.ArgumentParser(description=f"{APP_NAME} v{APP_VERSION}")
    parser.add_argument("--minimize", action="store_true", help="–°—Ç–∞—Ä—Ç —Å–≤–µ—Ä–Ω—É—Ç—ã–º –≤ —Ç—Ä–µ–π")
    parser.add_argument("--version", action="version", version=f"{APP_NAME} {APP_VERSION}")
    args = parser.parse_args()

    app = QtWidgets.QApplication(sys.argv)
    app.setApplicationName(APP_NAME)
    app.setOrganizationName("OllamaChat")
    app.setApplicationVersion(APP_VERSION)
    
    # —Ç–µ–º–∞ –∏–∫–æ–Ω–æ–∫
    QtGui.QIcon.setThemeSearchPaths(QtGui.QIcon.themeSearchPaths() + ["/usr/share/icons", "/usr/local/share/icons"])
    if not QtGui.QIcon.themeName():
        QtGui.QIcon.setThemeName("breeze")

    w = MainWindow()
    if args.minimize:
        w.hide()
    else:
        w.show()

    sys.exit(app.exec())


if __name__ == "__main__":
    ensure_paths()
    main()
